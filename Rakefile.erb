require "rubygems"
require "rake/gempackagetask"
require "rake/rdoctask"

<% extra_default_tasks = [] %>
<% development_dependencies = [] %>

<% if using_cucumber? %>
require 'cucumber'
require 'cucumber/rake/task'
Cucumber::Rake::Task.new('features') do |t|
  t.cucumber_opts = %w{--format pretty}
end
<%
extra_default_tasks << 'features'
development_dependencies << 'cucumber'
%>
<% end %>
<% if using_rspec? %>
<% development_dependencies << 'rspec' %>
task :default => <%= ([:spec] + extra_default_tasks).inspect %>

require "spec"
require "spec/rake/spectask"
Spec::Rake::SpecTask.new do |t|
  t.spec_opts = %w(--format specdoc --colour)
  t.libs = ["spec"]
end
<% elsif using_test_unit? %>
<% development_dependencies << 'mocha' %>
task :default => <%= ([:test] + extra_default_tasks).inspect %>

require "rake/testtask"
Rake::TestTask.new do |t|
  t.libs << "test"
  t.test_files = FileList["test/**/*_test.rb"]
  t.verbose = true
end
<% else %>
task :default => :package do
  puts "Don't forget to write some tests!"
end
<% end %>

# This builds the actual gem. For details of what all these options
# mean, and other ones you can add, check the documentation here:
#
#   http://rubygems.org/read/chapter/20
#
spec = Gem::Specification.new do |s|

  # Change these as appropriate
  s.name              = "<%= name %>"
  s.version           = "0.1.0"
  s.summary           = "What this thing does"
  s.author            = "<%= author_name %>"
  s.email             = "<%= author_email %>"
  s.homepage          = "<%= author_url %>"

  s.has_rdoc          = true
<% if readme %>
  s.extra_rdoc_files  = %w(<%= readme %>)
  s.rdoc_options      = %w(--main <%= readme %>)

  # Add any extra files to include in the gem
<% else %>
  # You should probably have a README of some kind. Change the filename
  # as appropriate
  # s.extra_rdoc_files  = %w(README)
  # s.rdoc_options      = %w(--main README)

  # Add any extra files to include in the gem (like your README)
<% end %>
  s.files             = %w(<%= files_in_root %>) + Dir.glob("{<%= dirs_to_include_glob %>}")
<% if has_executables? %>
  s.executables       = FileList["bin/**"].map { |f| File.basename(f) }
<% end %>
<% if has_lib_directory? %>   
  s.require_paths     = ["lib"]
<% else %>

  # You need to put your code in a directory which can then be added to
  # the $LOAD_PATH by rubygems. Typically this is lib, but you don't seem
  # to have that directory. You'll need to set the line below to whatever
  # directory your code is in. Rubygems is going to assume lib if you leave
  # this blank.
  #
  # s.require_paths = ["lib"]
<% end %>

  # If you want to depend on other gems, add them here, along with any
  # relevant versions
  # s.add_dependency("some_other_gem", "~> 0.1.0")

  # If your tests use any gems, include them here
<% development_dependencies.each do |dependency| %>
  s.add_development_dependency("<%= dependency %>")
<% end %>

  # If you want to publish automatically to rubyforge, you'll may need
  # to tweak this, and the publishing task below too.
  s.rubyforge_project = "<%= name %>"
end

# This task actually builds the gem. We also regenerate a static
# .gemspec file, which is useful if something (i.e. GitHub) will
# be automatically building a gem for this project. If you're not
# using GitHub, edit as appropriate.
Rake::GemPackageTask.new(spec) do |pkg|
  pkg.gem_spec = spec

  # Generate the gemspec file for github.
  file = File.dirname(__FILE__) + "/#{spec.name}.gemspec"
  File.open(file, "w") {|f| f << spec.to_ruby }
end

# Generate documentation
Rake::RDocTask.new do |rd|
  <% if readme %>rd.main = "<%= readme %>"<% end %>
  rd.rdoc_files.include(<%= %{"#{readme}", } if readme %>"lib/**/*.rb")
  rd.rdoc_dir = "rdoc"
end

desc 'Clear out RDoc and generated packages'
task :clean => [:clobber_rdoc, :clobber_package] do
  rm "#{spec.name}.gemspec"
end

# If you want to publish to RubyForge automatically, here's a simple
# task to help do that. If you don't, just get rid of this.
# Be sure to set up your Rubyforge account details with the Rubyforge
# gem; you'll need to run `rubyforge setup` and `rubyforge config` at
# the very least.
begin
  require "rake/contrib/sshpublisher"
  namespace :rubyforge do

    desc "Release gem and RDoc documentation to RubyForge"
    task :release => ["rubyforge:release:gem", "rubyforge:release:docs"]

    namespace :release do
      desc "Release a new version of this gem"
      task :gem => [:package] do
        require 'rubyforge'
        rubyforge = RubyForge.new
        rubyforge.configure
        rubyforge.login
        rubyforge.userconfig['release_notes'] = spec.summary
        path_to_gem = File.join(File.dirname(__FILE__), "pkg", "#{spec.name}-#{spec.version}.gem")
        puts "Publishing #{spec.name}-#{spec.version.to_s} to Rubyforge..."
        rubyforge.add_release(spec.rubyforge_project, spec.name, spec.version.to_s, path_to_gem)
      end

      desc "Publish RDoc to RubyForge."
      task :docs => [:rdoc] do
        config = YAML.load(
            File.read(File.expand_path('~/.rubyforge/user-config.yml'))
        )

        host = "#{config['username']}@rubyforge.org"
        remote_dir = "/var/www/gforge-projects/<%= name %>/" # Should be the same as the rubyforge project name
        local_dir = 'rdoc'

        Rake::SshDirPublisher.new(host, remote_dir, local_dir).upload
      end
    end
  end
rescue LoadError
  puts "Rake SshDirPublisher is unavailable or your rubyforge environment is not configured."
end
