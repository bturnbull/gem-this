#!/usr/bin/env ruby

args = ARGV.dup

if args.first =~ /-?-h/
  puts "Creates a Rakefile suitable for turning the current project into a gem."
  puts "Usage: #{__FILE__} [-d -h] [gem name]"
  puts "If a gem name is not given, the name of the current directory will be used as the gem"
  puts "-h    help, prints out this message."
  puts "-d    debug, only prints out the generated Rakefile."
  exit(0)
end

debug = args.delete("-d")

gem_name = args.first || File.basename(Dir.pwd)

def using_rspec?
  File.directory?('spec')
end

def using_test_unit?
  File.directory?('test')
end

def has_executables?
  File.directory?('bin')
end

def dirs_to_include
  %w(bin test spec lib).select { |d| File.directory?(d) }.join(",")
end

def readme
  Dir['*'].find { |f| f =~ /readme/i }
end

def files_in_root
  Dir['*'].reject { |f| File.directory?(f) }.join(" ")
end

def using_git?
  File.exist?(".git")
end

def add_to_gitignore
  ignores = File.readlines(".gitignore")
  ignores += ["pkg", "rdoc"]
  File.open(".gitignore", "w") { |f| f.write ignores.map { |l| l.strip }.uniq.join("\n") }
end

require 'erb'

template = ERB.new DATA.read, nil, '<>'
rakefile = template.result(binding)

if debug
  puts rakefile
  exit(0)
else
  if File.exist?('Rakefile')
    puts "Appended to existing Rakefile"
    File.open('Rakefile', 'a') { |f| 2.times { f.puts }; f.write rakefile }
  else
    puts "Writing new Rakefile"
    File.open('Rakefile', 'w') { |f| f.write rakefile }
  end
  add_to_gitignore if using_git?
end

exit(0)

__END__
require "rubygems"
require "rake/gempackagetask"
require "rake/rdoctask"

<% if using_rspec? %>
task :default => :spec

require "spec"
require "spec/rake/spectask"
Spec::Rake::SpecTask.new do |t|
  t.spec_opts = %w(--format specdoc --colour)
  t.libs = ["spec"]
end
<% elsif using_test_unit? %>
task :default => :test

require "rake/testtask"
Rake::TestTask.new do |t|
  t.libs << "test"
  t.test_files = FileList["test/**/*_test.rb"]
  t.verbose = true
end
<% else %>
task :default => :package do
  puts "Don't forget to write some tests!"
end
<% end %>

# This builds the actual gem. For details of what all these options
# mean, and other ones you can add, check the documentation here:
#
#   http://rubygems.org/read/chapter/20
#
spec = Gem::Specification.new do |s|
  
  # Change these as appropriate
  s.name              = "<%= gem_name %>"
  s.version           = "0.1.0"
  s.summary           = "What this thing does"
  s.author            = "Your name"
  s.email             = "you@example.com"
  s.homepage          = "http://example.com"

  s.has_rdoc          = true
<% if readme %>
  # s.extra_rdoc_files  = %w(<%= readme %>)
  # s.rdoc_options      = %w(--main <%= readme %>)

  # Add any extra files to include in the gem
<% else %>  
  # You should probably have a README of some kind. Change the filename
  # as appropriate
  # s.extra_rdoc_files  = %w(README)
  # s.rdoc_options      = %w(--main README)

  # Add any extra files to include in the gem (like your README)
<% end %>
  s.files             = %w(<%= files_in_root %>) + Dir.glob("{<%= dirs_to_include %>}/**/*")
<% if has_executables? %>
  s.executables       = FileList["bin/**"].map { |f| File.basename(f) }
<% end %>   
  
  # If you want to depend on other gems, add them here, along with any
  # relevant versions
  # s.add_dependency("some_other_gem", "~> 0.1.0")
  
<% if using_rspec? %>
  s.add_development_dependency("rspec") # add any other gems for testing/development
<% else %>
  # If your tests use any gems, include them here
  # s.add_development_dependency("mocha")
<% end %>

  # If you want to publish automatically to rubyforge, you'll may need
  # to tweak this, and the publishing task below too.
  s.rubyforge_project = "<%= gem_name %>"
end

# This task actually builds the gem. We also regenerate a static 
# .gemspec file, which is useful if something (i.e. GitHub) will
# be automatically building a gem for this project. If you're not
# using GitHub, edit as appropriate.
Rake::GemPackageTask.new(spec) do |pkg|
  pkg.gem_spec = spec
  
  # Generate the gemspec file for github.
  file = File.dirname(__FILE__) + "/#{spec.name}.gemspec"
  File.open(file, "w") {|f| f << spec.to_ruby }
end

# Generate documentation
Rake::RDocTask.new do |rd|
  <% if readme %>rd.main = "<%= readme %>"<% end %>
  rd.rdoc_files.include(<%= %{"#{readme}", } if readme %>"lib/**/*.rb")
  rd.rdoc_dir = "rdoc"
end

desc 'Clear out RDoc and generated packages'
task :clean => [:clobber_rdoc, :clobber_package] do
  rm "#{spec.name}.gemspec"
end

# If you want to publish to RubyForge automatically, here's a simple 
# task to help do that. If you don't, just get rid of this.
begin
  require "rake/contrib/sshpublisher"
  namespace :rubyforge do
    
    desc "Release gem and RDoc documentation to RubyForge"
    task :release => ["rubyforge:release:gem", "rubyforge:release:docs"]
    
    namespace :release do
      desc "Publish RDoc to RubyForge."
      task :docs => [:rdoc] do
        config = YAML.load(
            File.read(File.expand_path('~/.rubyforge/user-config.yml'))
        )
 
        host = "#{config['username']}@rubyforge.org"
        remote_dir = "/var/www/gforge-projects/<%= gem_name %>/" # Should be the same as the rubyforge project name
        local_dir = 'rdoc'
 
        Rake::SshDirPublisher.new(host, remote_dir, local_dir).upload
      end
    end
  end
rescue LoadError
  puts "Rake SshDirPublisher is unavailable or your rubyforge environment is not configured."
end
